#ifndef PROCESSOR_H
#define PROCESSOR_H

#include "Memory.h"
#include "Command.h"

class Processor final
{
private:
    //Program State Word = IP + Flags
    struct PSW final
    {
    public:

        byte_t NF : 1;			//флаг отрицания
        byte_t ZF : 1;			//флаг нуля
        byte_t OF : 1;			//флаг переполнения
        address_t reserved : 12;
        address_t IP;			//указатель на следующую инструкцию

        PSW() : NF{ }, ZF{ }, OF{ } {}

        void set_ZF(double num);
        void set_NF(double num);
        void set_ZF(int64_t num);
        void set_NF(int64_t num);
        void set_OF(int64_t num);
        void set_OF(double num);
        void reset_flags();
    };

    address_t startIp;  // - Начальный IP (нужен для перезагрузки машины)
    PSW psw;			// - psw = IP + флаги
    cmd_t cmd;			// - Текущая выполняемая команда
    class Command* commands[41] = { nullptr };
    void load_next_cmd();

    enum Operations
    {
        stop = 0,       // - Остановка выполнения программы (32 бит)
        move = 1,       // - Пересылка данных (2-ух операндная, 32 бит)
        // - Целочиленная арифметика
        iAdd = 2,       // - Сложение целых чисел (2-ух операндная, 32 бит)
        iSub = 3,       // - Вычитание целых чисел (2-ух операндная, 32 бит)
        iMul = 4,       // - Умножение целых чисел (2-ух операндная, 32 бит)
        iDiv = 5,       // - Деление целых чисел (2-ух операндная, 32 бит)
        iMod = 6,       // - Остаток от деления (2-ух операндная, 32 бит)
        iInc = 7,       // - Инкремент (одно-операндная, 32 бит)
        iDec = 8,       // - Декремент (одно-операндная, 32 бит)
        iAnd = 9,       // - Логическое И (2-ух операндная, 32 бит)
        iOr = 10,       // - Логическое ИЛИ (2-ух операндная, 32 бит)
        iNot = 11,      // - Логическое НЕ (одно-операндная, 32 бит)
        iXor = 12,      // - Исключающее или (одно-операндная, 32 бит)

        // - Вещественная арифметика
        rAdd = 13,      // - Сложение вещественных чисел (2-ух операндная, 32 бит)
        rSub = 14,      // - Вычитание вещественных чисел (2-ух операндная, 32 бит)
        rMul = 15,      // - Умножение вещественных чисел (2-ух операндная, 32 бит)
        rDiv = 16,      // - Деление вещественных чисел (2-ух операндная, 32 бит)

        // - Целочисленная беззнаковая арифметика (с регистрами)
        rgAdd = 17,     // - Прибавление значения к регистру (2-ух операндная, 32 бит)
        rgSub = 18,     // - Вычитание значения из регистра (2-ух операндная, 32 бит)

        // - Работа с подпрограммой
        call = 19,      // - Вызов подпрограммы (2-ух операндная, 32 бит)
        ret = 20,       // - Возврат из подпрограммы (32 бит)

        // - Сравнения
        icmp = 21,      // - Сравнение целых чисел
        rcmp = 22,      // - Сравнение дробных чисел

        save = 30,      // - Сохранение адресных регистров в памяти (одно-операндная, 24 бит)
        load = 31,      // - Загрузка адресных регистров из памяти (одно-операндная, 24 бит)

        // - Команды ввода/вывода
        input = 32,     // - Ввод чисел (одно-операндная, 24 бит)
        output = 33,    // - Вывод чисел (одно-операндная, 24 бит)
        // - Переходы
        jmp = 34,       // - Прямой безусловный переход (одно-операндная, 24 бит)
        je = 35,        // - Переход, если операнды равны (24 бит)
        jne = 36,       // - Переход, если операнды не равны (24 бит)
        jg = 37,        // - Переход, если первый операнд больше второго (24 бит)
        jge = 38,       // - Переход, если первый операнд больше или равен второму (24 бит)
        jl = 39,        // - Переход, если первый операнд меньше второго (24 бит)
        jle = 40,       // - Переход, если первый операнд меньше или равен второму (24 бит)
    };

public:
    Memory memory;		        // - Память
    address_t regs[2];	        // - Регистры

    Processor();
    Processor(const Processor&) = delete;
    Processor(const Processor&&) = delete;
    Processor& operator=(const Processor&) = delete;
    Processor& operator=(const Processor&&) = delete;

    cmd_t GetCurrentCmd() const noexcept;
    void SetIP(address_t IP) noexcept;
    PSW GetPSW() const noexcept;
    void reset() noexcept;
    void run();
};

#endif // !PROCESSOR_H

